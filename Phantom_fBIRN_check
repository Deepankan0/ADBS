"""
DICOM File Analysis Script

This script reads PHANTOM_DICOM files from a yearly_montly directory structure(old_format),
extracts relevant information, checks file completeness for daily fBIRN,
and exports the results to a CSV file.

Requirements:
- pydicom (imported as dcmread from pydicom)
- pandas

Authors:
Chakraborty, Deepankan
BS, Vaishnavi
July, 2024
CBM
"""

# Import necessary libraries
from pydicom import dcmread as dr  # Importing dcmread function from pydicom as dr
import os  # Operating System module for file and directory operations
import pandas as pd  # Importing pandas library for data manipulation
from collections import defaultdict  # Importing defaultdict from collections module

# Define the path to the directory containing the DICOM files
path = '/mnt/Storage/Backupdata/MRI/26122023/To_ADC/PHANTOM DATA/FBIRN/2023'

# Initialize a list to store final information
final_info = []

# Loop through each subject
for month in os.listdir(path):
    month_path = os.path.join(path, month)
    if os.path.isdir(month_path):
        for subj in os.listdir(month_path):
            subj_path = os.path.join(month_path, subj)
            if os.path.isdir(subj_path):
                for seq in os.listdir(subj_path):
                    seq_path = os.path.join(subj_path, seq)
                    if os.path.isdir(seq_path) and 'S0' not in seq and seq != 'DIRFILE':
                        # Check for DICOM files starting with 'I'
                        i_files = [file for file in os.listdir(seq_path) if file.startswith('I')]
                        if i_files:
                            i_file_path = os.path.join(seq_path, i_files[0])
                            print('Trying to read DICOM file:', i_file_path)
                            try:
                                # Read DICOM file and extract relevant information
                                data = dr(i_file_path, force=True)
                                data_info = [
                                    month,
                                    subj,
                                    getattr(data, 'AccessionNumber', None),  # Check if AccessionNumber exists
                                    getattr(data, 'PatientName', None),      # Check if PatientName exists
                                    getattr(data, 'StudyDate', None),        # Check if StudyDate exists
                                    seq,
                                    getattr(data, 'ProtocolName', None),     # Check if ProtocolName exists
                                    len(os.listdir(seq_path))
                                ]
                                final_info.append(data_info)
                            except IOError:
                                print('Failed to read DICOM file:', i_file_path)
                        else:
                            print('No I-file found in {}'.format(seq_path))

# Convert the collected information into a DataFrame
data = pd.DataFrame(final_info, columns=['Month', 'File_name', 'AccessionNumber', 'PatientName', 'StudyDate', 'Seq', 'ProtocolName', 'N_files'])

# Dictionary to store expected number of files for each sequence
expected_files = {
    'REST_FE_EPI_PB_VOLUME_SHIM': 6160,
    'DKI_56slices_SHIM_PB_VOLUME': 616,
    'Survey': 9,
    'T1W_FFE': 2,
    'DelRec - T1W_FFE': 58,
}

# Function to check if N_files is complete
def is_complete(row):
    """
    Function to determine if the number of files (N_files) for a given row
    meets the expected count based on the sequence (ProtocolName).
    
    Parameters:
    - row: pandas Series representing a row of the DataFrame
    
    Returns:
    - 1 if N_files meets or exceeds the expected count
    - 0 if N_files does not meet the expected count
    - -1 if the sequence is unknown
    """
    sequence = row['ProtocolName']
    if sequence in expected_files:
        expected_count = expected_files[sequence]
        return 1 if row['N_files'] >= expected_count else 0
    else:
        return -1  # Indicate unknown sequence

# Insert a new column 'N_files_Complete' to indicate completeness
data['N_files_Complete'] = data.apply(is_complete, axis=1)

# Export the modified data to CSV
modified_data_file = '/mnt/Storage/Backupdata/MRI/26122023/PHANTOM_DICOM_Information/fBIRN.csv'
data.to_csv(modified_data_file, index=False)

print('Modified data saved to %s' % modified_data_file)
